rm(list = c("pentagramData"))
penta_words <- pentagram_tiny %>%
separate(pentagram, c("word1", "word2", "word3", "word4", "word5"), sep = " ")
hexagramData <- sampleDataText %>%
unnest_tokens(hexagram, text, token = "ngrams", n = 6)
hexagram_tiny <- hexagramData %>%
count(hexagram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("hexagramData"))
hexa_words <- hexagram_tiny %>%
separate(hexagram, c("word1", "word2", "word3", "word4", "word5", "word6"), sep = " ")
dir.create("data", showWarnings = FALSE)
saveRDS(bi_words, "C:/Users/Platon/Desktop/Coursera/Capstone Project/data/bi_words.rds")
saveRDS(tri_words, "C:/Users/Platon/Desktop/Coursera/Capstone Project/data/tri_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/quad_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/penta_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/hexa_words.rds")
View(hexa_words)
View(penta_words)
View(quad_words)
bigramData <- sampleDataText %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigram_tiny <- bigramData %>%
count(bigram) %>%
filter(n > 10) %>%
arrange(desc(n))
rm(list = c("bigramData"))
bi_words <- bigram_tiny %>%
separate(bigram, c("word1", "word2"), sep = " ")
trigramData <- sampleDataText %>%
unnest_tokens(trigram, text, token = "ngrams", n = 3)
trigram_tiny <- trigramData %>%
count(trigram) %>%
filter(n > 5) %>%
arrange(desc(n))
rm(list = c("trigramData"))
tri_words <- trigram_tiny %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
quadgramData <- sampleDataText %>%
unnest_tokens(quadgram, text, token = "ngrams", n = 4)
quadgram_tiny <- quadgramData %>%
count(quadgram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("quadgramData"))
quad_words <- quadgram_tiny %>%
separate(quadgram, c("word1", "word2", "word3", "word4"), sep = " ")
pentagramData <- sampleDataText %>%
unnest_tokens(pentagram, text, token = "ngrams", n = 5)
pentagram_tiny <- pentagramData %>%
count(pentagram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("pentagramData"))
penta_words <- pentagram_tiny %>%
separate(pentagram, c("word1", "word2", "word3", "word4", "word5"), sep = " ")
hexagramData <- sampleDataText %>%
unnest_tokens(hexagram, text, token = "ngrams", n = 6)
hexagram_tiny <- hexagramData %>%
count(hexagram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("hexagramData"))
hexa_words <- hexagram_tiny %>%
separate(hexagram, c("word1", "word2", "word3", "word4", "word5", "word6"), sep = " ")
dir.create("data", showWarnings = FALSE)
saveRDS(bi_words, "C:/Users/Platon/Desktop/Coursera/Capstone Project/data/bi_words.rds")
saveRDS(tri_words, "C:/Users/Platon/Desktop/Coursera/Capstone Project/data/tri_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/quad_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/penta_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/hexa_words.rds")
View(quad_words)
bigramData <- sampleDataText %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigram_tiny <- bigramData %>%
count(bigram) %>%
filter(n > 10) %>%
arrange(desc(n))
rm(list = c("bigramData"))
bi_words <- bigram_tiny %>%
separate(bigram, c("word1", "word2"), sep = " ")
trigramData <- sampleDataText %>%
unnest_tokens(trigram, text, token = "ngrams", n = 3)
trigram_tiny <- trigramData %>%
count(trigram) %>%
filter(n > 3) %>%
arrange(desc(n))
rm(list = c("trigramData"))
tri_words <- trigram_tiny %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
quadgramData <- sampleDataText %>%
unnest_tokens(quadgram, text, token = "ngrams", n = 4)
quadgram_tiny <- quadgramData %>%
count(quadgram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("quadgramData"))
quad_words <- quadgram_tiny %>%
separate(quadgram, c("word1", "word2", "word3", "word4"), sep = " ")
pentagramData <- sampleDataText %>%
unnest_tokens(pentagram, text, token = "ngrams", n = 5)
pentagram_tiny <- pentagramData %>%
count(pentagram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("pentagramData"))
penta_words <- pentagram_tiny %>%
separate(pentagram, c("word1", "word2", "word3", "word4", "word5"), sep = " ")
hexagramData <- sampleDataText %>%
unnest_tokens(hexagram, text, token = "ngrams", n = 6)
hexagram_tiny <- hexagramData %>%
count(hexagram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("hexagramData"))
hexa_words <- hexagram_tiny %>%
separate(hexagram, c("word1", "word2", "word3", "word4", "word5", "word6"), sep = " ")
dir.create("data", showWarnings = FALSE)
saveRDS(bi_words, "C:/Users/Platon/Desktop/Coursera/Capstone Project/data/bi_words.rds")
saveRDS(tri_words, "C:/Users/Platon/Desktop/Coursera/Capstone Project/data/tri_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/quad_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/penta_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/hexa_words.rds")
View(tri_words)
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
View(penta_words)
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp()
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
View(hexa_words)
View(penta_words)
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
View(bi_words)
View(tri_words)
View(sampleDataText)
sampleBlogs <- tm_map(sampleBlogs, removeWords, stopwords("english"))
shiny::runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(stringr)
library(wordcloud)
library(quanteda)
library(tidytext)
library(dplyr)
library(tidyr)
library(data.table)
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
options(warn=-1)
blogs <- readLines("C:/Users/Platon/Desktop/Coursera/Capstone Project/final/en_US/en_US.blogs.txt")
news<- readLines("C:/Users/Platon/Desktop/Coursera/Capstone Project/final/en_US/en_US.news.txt")
twitter<- readLines("C:/Users/Platon/Desktop/Coursera/Capstone Project/final/en_US/en_US.twitter.txt", skipNul = TRUE)
sampleBlogs <- sample(blogs, length(blogs) * 0.02, replace = FALSE)
sampleNews <- sample(news, length(news) * 0.02, replace = FALSE)
sampleTwitter <- sample(twitter, length(twitter) * 0.02, replace = FALSE)
sampleBlogs <- iconv(sampleBlogs, "latin1", "ASCII", sub = "")
sampleNews <- iconv(sampleNews, "latin1", "ASCII", sub = "")
sampleTwitter <- iconv(sampleTwitter, "latin1", "ASCII", sub = "")
profanity <- read.table("C:/Users/Platon/Desktop/Coursera/Capstone Project/Profanity/facebook_profanity.txt", sep=",")
sampleBlogs <- VCorpus(VectorSource(sampleBlogs))
#sampleBlogs <- tm_map(sampleBlogs, removeWords, profanity)
sampleNews <- VCorpus(VectorSource(sampleNews))
#sampleNews <- tm_map(sampleNews, removeWords, profanity)
sampleTwitter <- VCorpus(VectorSource(sampleTwitter))
#sampleTwitter <- tm_map(sampleTwitter, removeWords, profanity)
sampleBlogs <- tm_map(sampleBlogs, removePunctuation)
sampleNews <- tm_map(sampleNews, removePunctuation)
sampleTwitter <- tm_map(sampleTwitter, removePunctuation)
sampleBlogs <- tm_map(sampleBlogs, removeWords, stopwords("english"))
sampleNews <- tm_map(sampleNews, removeWords, stopwords("english"))
sampleTwitter <- tm_map(sampleTwitter, removeWords, stopwords("english"))
sampleBlogs <- tm_map(sampleBlogs, removeNumbers)
sampleNews <- tm_map(sampleNews, removeNumbers)
sampleTwitter <- tm_map(sampleTwitter, removeNumbers)
sampleBlogs <- tm_map(sampleBlogs, stripWhitespace)
sampleNews <- tm_map(sampleNews, stripWhitespace)
sampleTwitter <- tm_map(sampleTwitter, stripWhitespace)
sampleBlogs <- tm_map(sampleBlogs, PlainTextDocument)
sampleNews <- tm_map(sampleNews, PlainTextDocument)
sampleTwitter <- tm_map(sampleTwitter, PlainTextDocument)
sampleData <- c(sampleBlogs, sampleNews, sampleTwitter)
saveRDS(sampleData, file = "C:/Users/Platon/Desktop/Coursera/Capstone Project/sampleData.rds")
sampleDataText <- data.frame(text = unlist(sapply(sampleData, '[', "content")), stringsAsFactors = FALSE)
con <- file("C:/Users/Platon/Desktop/Coursera/Capstone Project/sampleData.rds", open = "w")
writeLines(sampleDataText$text, con)
close(con)
bigramData <- sampleDataText %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigram_tiny <- bigramData %>%
count(bigram) %>%
filter(n > 10) %>%
arrange(desc(n))
rm(list = c("bigramData"))
bi_words <- bigram_tiny %>%
separate(bigram, c("word1", "word2"), sep = " ")
trigramData <- sampleDataText %>%
unnest_tokens(trigram, text, token = "ngrams", n = 3)
trigram_tiny <- trigramData %>%
count(trigram) %>%
filter(n > 3) %>%
arrange(desc(n))
rm(list = c("trigramData"))
tri_words <- trigram_tiny %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
quadgramData <- sampleDataText %>%
unnest_tokens(quadgram, text, token = "ngrams", n = 4)
quadgram_tiny <- quadgramData %>%
count(quadgram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("quadgramData"))
quad_words <- quadgram_tiny %>%
separate(quadgram, c("word1", "word2", "word3", "word4"), sep = " ")
pentagramData <- sampleDataText %>%
unnest_tokens(pentagram, text, token = "ngrams", n = 5)
pentagram_tiny <- pentagramData %>%
count(pentagram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("pentagramData"))
penta_words <- pentagram_tiny %>%
separate(pentagram, c("word1", "word2", "word3", "word4", "word5"), sep = " ")
hexagramData <- sampleDataText %>%
unnest_tokens(hexagram, text, token = "ngrams", n = 6)
hexagram_tiny <- hexagramData %>%
count(hexagram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("hexagramData"))
hexa_words <- hexagram_tiny %>%
separate(hexagram, c("word1", "word2", "word3", "word4", "word5", "word6"), sep = " ")
dir.create("data", showWarnings = FALSE)
saveRDS(bi_words, "C:/Users/Platon/Desktop/Coursera/Capstone Project/data/bi_words.rds")
saveRDS(tri_words, "C:/Users/Platon/Desktop/Coursera/Capstone Project/data/tri_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/quad_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/penta_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/hexa_words.rds")
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
View(penta_words)
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
character(0)
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
?row_number
shinytest::recordTest("C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone")
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp()
sfa
dfgj''
abort
`abort`
Q
Q
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
View(input_text)
?unlist
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
input_text <- data_frame(text = The guy in front of me just bought a pound of bacon, a bouquet, and a case of)
input_text <- data_frame(text = "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
replace_reg <- "[^[:alpha:][:space:]]*"
input_text <- input_text %>%
mutate(text = str_replace_all(text, replace_reg, ""))
input_text
input_count <- str_count(input_text, boundary("word"))
input_phrase <- unlist(str_split(input_text, boundary("word")))
pentagram <- function(input_phrase){
num <- length(input_phrase)
filter(penta_words,
word1==input_phrase[num-3],
word2==input_phrase[num-2],
word3==input_phrase[num-1],
word4==input_phrase[num])  %>%
top_n(1, n) %>%
filter(row_number() == 1L) %>%
select(num_range("word", 5)) %>%
as.character() -> out
ifelse(out=="character(0)", quadgram(input_phrase), return(out))
}
quadgram <- function(input_phrase){
num <- length(input_phrase)
filter(quad_words,
word1==input_phrase[num-2],
word2==input_phrase[num-1],
word3==input_phrase[num])  %>%
top_n(1, n) %>%
filter(row_number() == 1L) %>%
select(num_range("word", 4)) %>%
as.character() -> out
ifelse(out=="character(0)", trigram(input_phrase), return(out))
}
trigram <- function(input_phrase){
num <- length(input_phrase)
filter(tri_words,
word1==input_phrase[num-1],
word2==input_phrase[num])  %>%
top_n(1, n) %>%
filter(row_number() == 1L) %>%
select(num_range("word", 3)) %>%
as.character() -> out
ifelse(out=="character(0)", bigram(input_phrase), return(out))
}
bigram <- function(input_phrase){
num <- length(input_phrase)
filter(bi_words,
word1==input_phrase[num]) %>%
top_n(1, n) %>%
filter(row_number() == 1L) %>%
select(num_range("word", 2)) %>%
as.character() -> out
ifelse(out =="character(0)", "no_clue", return(out))
}
pentagram(input_phrase)
ngrams <- function(input_text){
input_text <- data_frame(text = input_text)
replace_reg <- "[^[:alpha:][:space:]]*"
input_text <- input_text %>%
mutate(text = str_replace_all(text, replace_reg, ""))
input_count <- str_count(input_text, boundary("word"))
input_phrase <- unlist(str_split(input_text, boundary("word")))
alacazam <- ifelse(input_count == 0, "Give this guy some love and type something for him to guess or he will be out of business",
ifelse (input_count == 1, bigram(input_phrase),
ifelse (input_count == 2, trigram(input_phrase),
ifelse (input_count >= 3, quadgram(input_phrase)))))
if(alacazam == "no_clue"){
alacazam = "Akinator is probably a fraud because he has no clue"
}
return(input_count)
}
ngrams(input_text)
ngrams <- function(input_text){
input_text <- data_frame(text = input_text)
replace_reg <- "[^[:alpha:][:space:]]*"
input_text <- input_text %>%
mutate(text = str_replace_all(text, replace_reg, ""))
input_count <- str_count(input_text, boundary("word"))
input_phrase <- unlist(str_split(input_text, boundary("word")))
alacazam <- ifelse(input_count == 0, "Give this guy some love and type something for him to guess or he will be out of business",
ifelse (input_count == 1, bigram(input_phrase),
ifelse (input_count == 2, trigram(input_phrase),
ifelse (input_count >= 3, quadgram(input_phrase)))))
if(alacazam == "no_clue"){
alacazam = "Akinator is probably a fraud because he has no clue"
}
return(alacazam)
}
ngrams(input_text)
ngrams <- function(input_text){
input_text <- data_frame(text = input_text)
replace_reg <- "[^[:alpha:][:space:]]*"
input_text <- input_text %>%
mutate(text = str_replace_all(text, replace_reg, ""))
input_count <- str_count(input_text, boundary("word"))
input_phrase <- unlist(str_split(input_text, boundary("word")))
alacazam <- ifelse(input_count == 0, "Give this guy some love and type something for him to guess or he will be out of business",
ifelse (input_count == 1, bigram(input_phrase),
ifelse (input_count == 2, trigram(input_phrase),
ifelse (input_count == 3, quadgram(input_phrase), pentagram(input_phrase)))))
if(alacazam == "no_clue"){
alacazam = "Akinator is probably a fraud because he has no clue"
}
return(alacazam)
}
ngrams(input_text)
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
shiny::runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(stringr)
library(wordcloud)
library(quanteda)
library(tidytext)
library(dplyr)
library(tidyr)
library(data.table)
options(warn=-1)
blogs <- readLines("C:/Users/Platon/Desktop/Coursera/Capstone Project/final/en_US/en_US.blogs.txt")
news<- readLines("C:/Users/Platon/Desktop/Coursera/Capstone Project/final/en_US/en_US.news.txt")
twitter<- readLines("C:/Users/Platon/Desktop/Coursera/Capstone Project/final/en_US/en_US.twitter.txt", skipNul = TRUE)
sampleBlogs <- sample(blogs, length(blogs) * 0.02, replace = FALSE)
sampleNews <- sample(news, length(news) * 0.02, replace = FALSE)
sampleTwitter <- sample(twitter, length(twitter) * 0.02, replace = FALSE)
sampleBlogs <- iconv(sampleBlogs, "latin1", "ASCII", sub = "")
sampleNews <- iconv(sampleNews, "latin1", "ASCII", sub = "")
sampleTwitter <- iconv(sampleTwitter, "latin1", "ASCII", sub = "")
profanity <- read.table("C:/Users/Platon/Desktop/Coursera/Capstone Project/Profanity/facebook_profanity.txt", sep=",")
sampleBlogs <- VCorpus(VectorSource(sampleBlogs))
#sampleBlogs <- tm_map(sampleBlogs, removeWords, profanity)
sampleNews <- VCorpus(VectorSource(sampleNews))
#sampleNews <- tm_map(sampleNews, removeWords, profanity)
sampleTwitter <- VCorpus(VectorSource(sampleTwitter))
#sampleTwitter <- tm_map(sampleTwitter, removeWords, profanity)
sampleBlogs <- tm_map(sampleBlogs, removePunctuation)
sampleNews <- tm_map(sampleNews, removePunctuation)
sampleTwitter <- tm_map(sampleTwitter, removePunctuation)
sampleBlogs <- tm_map(sampleBlogs, removeWords, stopwords("english"))
sampleNews <- tm_map(sampleNews, removeWords, stopwords("english"))
sampleTwitter <- tm_map(sampleTwitter, removeWords, stopwords("english"))
sampleBlogs <- tm_map(sampleBlogs, removeNumbers)
sampleNews <- tm_map(sampleNews, removeNumbers)
sampleTwitter <- tm_map(sampleTwitter, removeNumbers)
sampleBlogs <- tm_map(sampleBlogs, stripWhitespace)
sampleNews <- tm_map(sampleNews, stripWhitespace)
sampleTwitter <- tm_map(sampleTwitter, stripWhitespace)
sampleBlogs <- tm_map(sampleBlogs, PlainTextDocument)
sampleNews <- tm_map(sampleNews, PlainTextDocument)
sampleTwitter <- tm_map(sampleTwitter, PlainTextDocument)
sampleData <- c(sampleBlogs, sampleNews, sampleTwitter)
saveRDS(sampleData, file = "C:/Users/Platon/Desktop/Coursera/Capstone Project/sampleData.rds")
sampleDataText <- data.frame(text = unlist(sapply(sampleData, '[', "content")), stringsAsFactors = FALSE)
con <- file("C:/Users/Platon/Desktop/Coursera/Capstone Project/sampleData.rds", open = "w")
writeLines(sampleDataText$text, con)
close(con)
bigramData <- sampleDataText %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigram_tiny <- bigramData %>%
count(bigram) %>%
filter(n > 10) %>%
arrange(desc(n))
rm(list = c("bigramData"))
bi_words <- bigram_tiny %>%
separate(bigram, c("word1", "word2"), sep = " ")
trigramData <- sampleDataText %>%
unnest_tokens(trigram, text, token = "ngrams", n = 3)
trigram_tiny <- trigramData %>%
count(trigram) %>%
filter(n > 3) %>%
arrange(desc(n))
rm(list = c("trigramData"))
tri_words <- trigram_tiny %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
quadgramData <- sampleDataText %>%
unnest_tokens(quadgram, text, token = "ngrams", n = 4)
quadgram_tiny <- quadgramData %>%
count(quadgram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("quadgramData"))
quad_words <- quadgram_tiny %>%
separate(quadgram, c("word1", "word2", "word3", "word4"), sep = " ")
pentagramData <- sampleDataText %>%
unnest_tokens(pentagram, text, token = "ngrams", n = 5)
pentagram_tiny <- pentagramData %>%
count(pentagram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("pentagramData"))
penta_words <- pentagram_tiny %>%
separate(pentagram, c("word1", "word2", "word3", "word4", "word5"), sep = " ")
hexagramData <- sampleDataText %>%
unnest_tokens(hexagram, text, token = "ngrams", n = 6)
hexagram_tiny <- hexagramData %>%
count(hexagram) %>%
filter(n > 1) %>%
arrange(desc(n))
rm(list = c("hexagramData"))
hexa_words <- hexagram_tiny %>%
separate(hexagram, c("word1", "word2", "word3", "word4", "word5", "word6"), sep = " ")
dir.create("data", showWarnings = FALSE)
saveRDS(bi_words, "C:/Users/Platon/Desktop/Coursera/Capstone Project/data/bi_words.rds")
saveRDS(tri_words, "C:/Users/Platon/Desktop/Coursera/Capstone Project/data/tri_words.rds")
saveRDS(quad_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/quad_words.rds")
saveRDS(penta_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/penta_words.rds")
saveRDS(hexa_words,"C:/Users/Platon/Desktop/Coursera/Capstone Project/data/hexa_words.rds")
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
View(hexagram_tiny)
View(hexa_words)
View(bi_words)
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
View(bi_words)
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
View(profanity)
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
runApp('C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone')
setwd("C:/Users/Platon/Desktop/Coursera/Capstone Project/Data_Capstone")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
